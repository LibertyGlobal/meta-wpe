diff --git a/LocationSync/LocationService.cpp b/LocationSync/LocationService.cpp
index 8097a69..833dee0 100644
--- a/LocationSync/LocationService.cpp
+++ b/LocationSync/LocationService.cpp
@@ -23,191 +23,259 @@ namespace WPEFramework {
 namespace Plugin {
 
     struct IGeography {
-        virtual ~IGeography() {}
+        virtual ~IGeography() = default;
 
         virtual string Country() const = 0;
         virtual string City() const = 0;
         virtual string Region() const = 0;
         virtual string TimeZone() const = 0;
-        virtual string Latitude() const = 0;
-        virtual string Longitude() const = 0;
+        virtual int32_t Latitude() const = 0;
+        virtual int32_t Longitude() const = 0;
         virtual string IP() const = 0;
-        virtual void Updated() = 0;
+        virtual void FromString(const string&) = 0;
     };
 
-    class Geography : public IGeography, public Core::JSON::Container {
-
+    // http://ip-api.com/json
+    // {
+    //  "status":"success",
+    //  "country":"Netherlands",
+    //  "countryCode":"NL",
+    //  "region":"GE",
+    //  "regionName":"Gelderland",
+    //  "city":"Wijchen",
+    //  "zip":"6605",
+    //  "lat":51.798,
+    //  "lon":5.726,
+    //  "timezone":"Europe/Amsterdam",
+    //  "isp":"T-Mobile Thuis BV",
+    //  "org":"T-Mobile Thuis BV",
+    //  "as":"AS50266 T-Mobile Thuis BV",
+    //  "query":"85.146.148.211"
+    // }
+    class IPAPI: public IGeography {
     private:
-        Geography& operator=(const Geography&) = delete;
+        class Data : public Core::JSON::Container {
+        public:
+            Data(const Data&) = delete;
+            Data& operator=(const Data&) = delete;
+
+            Data()
+                : Core::JSON::Container()
+                , Country()
+                , City()
+                , Region()
+                , TimeZone()
+                , IP()
+                , Latitude(51.832547)
+                , Longitude(5.674899)
+            {
+                Add(_T("country"), &Country);
+                Add(_T("city"), &City);
+                Add(_T("regionName"), &Region);
+                Add(_T("timezone"), &TimeZone);
+                Add(_T("query"), &IP);
+                Add(_T("lat"), &Latitude);
+                Add(_T("lon"), &Longitude);
+            }
+            ~Data() override = default;
+
+        public:
+            Core::JSON::String Country;
+            Core::JSON::String City;
+            Core::JSON::String Region;
+            Core::JSON::String TimeZone;
+            Core::JSON::String IP;
+            Core::JSON::Double Latitude;
+            Core::JSON::Double Longitude;
+        };
 
     public:
-        Geography()
-            : Core::JSON::Container()
-            , _country()
-            , _city()
-            , _region()
-            , _timeZone()
-            , _latitude()
-            , _IP()
-            , _longitude()
-        {
-            Add(_T("country"), &_country);
-            Add(_T("city"), &_city);
-            Add(_T("region"), &_region);
-
-            // ip-api.com specific
-            Add(_T("tz"), &_timeZone);
-            Add(_T("ll"), &_latitude);
-
-            // ip-api.com specific
-            Add(_T("timezone"), &_timeZone);
-            Add(_T("query"), &_IP);
-            Add(_T("lat"), &_latitude);
-            Add(_T("lon"), &_longitude);
-        }
-        Geography(const Geography& copy)
-            : Core::JSON::Container()
-            , _country(copy._country)
-            , _city(copy._city)
-            , _region(copy._region)
-            , _timeZone(copy._timeZone)
-            , _latitude(copy._latitude)
-            , _IP(copy._IP)
-            , _longitude(copy._longitude)
-        {
-            Add(_T("country"), &_country);
-            Add(_T("city"), &_city);
-            Add(_T("region"), &_region);
-
-            // ip-api.com specific
-            Add(_T("tz"), &_timeZone);
-            Add(_T("ll"), &_latitude);
-
-            // ip-api.com specific
-            Add(_T("timezone"), &_timeZone);
-            Add(_T("query"), &_IP);
-            Add(_T("lat"), &_latitude);
-            Add(_T("lon"), &_longitude);
-        }
-        virtual ~Geography()
-        {
-        }
+        IPAPI(const IPAPI&) = delete;
+        IPAPI& operator= (const IPAPI&) = delete;
+
+        IPAPI() = default;
+        ~IPAPI() override = default;
 
     public:
-        virtual string Country() const
-        {
-            return (_country.Value());
-        }
-        virtual string City() const
+        string Country() const override
         {
-            return (_city.Value());
+            return (_data.Country.Value());
         }
-        virtual string Region() const
+        string City() const override
         {
-            return (_region.Value());
+            return (_data.City.Value());
         }
-        virtual string TimeZone() const
+        string Region() const override
         {
-            return (_timeZone.Value());
+            return (_data.Region.Value());
         }
-        virtual string Latitude() const
+        string TimeZone() const override
         {
-            return (_latitude.Value());
+            return (_data.TimeZone.Value());
         }
-        virtual string Longitude() const
+        int32_t Latitude() const override
         {
-            return (_longitude.Value());
+            return (_data.Latitude.Value() * 1000000);
         }
-        virtual string IP() const
+        int32_t Longitude() const override
         {
-            return (_IP.Value());
+            return (_data.Longitude.Value() * 1000000);
         }
-        virtual void Updated()
+        string IP() const override
         {
+            return (_data.IP.Value());
         }
-
-        inline void Location(const string& latitude, const string& longitude)
-        {
-            _latitude = latitude;
-            _longitude = longitude;
+        void FromString(const string& data) override {
+            TRACE(Trace::Information, (_T("IPAPI: Received a response: [%s]!"), data.c_str()));
+            _data.FromString(data);
         }
 
     private:
-        Core::JSON::String _country;
-        Core::JSON::String _city;
-        Core::JSON::String _region;
-        Core::JSON::String _timeZone;
-        Core::JSON::String _latitude;
-
-        // ip-api.com specific
-        Core::JSON::String _IP;
-        Core::JSON::String _longitude;
+        Data _data;
     };
 
-    class Response : public IGeography, public Core::JSON::Container {
+    // http://jsonip.metrological.com/?maf=true
+    // {
+    //  "ip":"85.146.148.211",
+    //  "ping":true,
+    //  "geo":
+    //  {
+    //   "country":"NL",
+    //   "city":"Elst",
+    //   "region":"GE",
+    //   "tz":"CET-1CEST,M3.5.0,M10.5.0/3",
+    //   "ll":
+    //   [
+    //    51.9201,
+    //    5.836
+    //   ]
+    //  }
+    // }
+    class Metrological : public IGeography {
     private:
-        Response(const Response&) = delete;
-        Response& operator=(const Response&) = delete;
+        class Data : public Core::JSON::Container {
+        public:
+            class Geography : public Core::JSON::Container {
+            public:
+                Geography(const Geography&) = delete;
+                Geography& operator=(const Geography&) = delete;
+
+                Geography()
+                    : Core::JSON::Container()
+                    , Country()
+                    , City()
+                    , Region()
+                    , TimeZone()
+                    , _LL()
+                {
+                    Add(_T("country"), &Country);
+                    Add(_T("city"), &City);
+                    Add(_T("region"), &Region);
+                    Add(_T("tz"), &TimeZone);
+                    Add(_T("ll"), &_LL);
+                }
+                ~Geography() override = default;
+
+          public:
+                int32_t Latitude() const {
+                    int32_t result = 51832547;
+                    Core::JSON::ArrayType<Core::JSON::Double>::ConstIterator index = _LL.Elements();
+
+                    if (index.Next() == true) {
+                        result = index.Current() * 1000000;
+                    }
+
+                    return (result);
+                }
+                int32_t Longitude() const {
+                    int32_t result = 5674899;
+                    Core::JSON::ArrayType<Core::JSON::Double>::ConstIterator index = _LL.Elements();
+
+                    if ( (index.Next() == true) && (index.Next() == true) ) {
+                        result = index.Current() * 1000000;
+                    }
+
+                    return (result);
+                }
+                Core::JSON::String Country;
+                Core::JSON::String City;
+                Core::JSON::String Region;
+                Core::JSON::String TimeZone;
+
+            private:
+                Core::JSON::ArrayType<Core::JSON::Double> _LL;
+            };
+
+        public:
+            Data(const Data&) = delete;
+            Data& operator= (const Data&) = delete;
+
+            Data()
+                : Core::JSON::Container()
+                , IP()
+                , Geo()
+                , Ping()
+            {
+                Add(_T("ip"), &IP);
+                Add(_T("geo"), &Geo);
+                Add(_T("ping"), &Ping);
+            }
+            ~Data() override = default;
+
+        public:
+            Core::JSON::String IP;
+            Geography Geo;
+            Core::JSON::Boolean Ping;
+        };
 
     public:
-        Response()
-            : Core::JSON::Container()
-            , _IP()
-            , _ping()
-            , _geo()
-        {
-            Add(_T("ip"), &_IP);
-            Add(_T("ping"), &_ping);
-            Add(_T("geo"), &_geo);
-        }
-        virtual ~Response()
-        {
-        }
+        Metrological(const Metrological&) = delete;
+        Metrological& operator= (const Metrological&) = delete;
+
+        Metrological() = default;
+        ~Metrological() override = default;
 
     public:
-        virtual string Country() const
+        string Country() const override
         {
-            return (_geo.Country());
+            return (_data.Geo.Country.Value());
         }
-        virtual string City() const
+        string City() const override
         {
-            return (_geo.City());
+            return (_data.Geo.City.Value());
         }
-        virtual string Region() const
+        string Region() const override
         {
-            return (_geo.Region());
+            return (_data.Geo.Region.Value());
         }
-        virtual string TimeZone() const
+        string TimeZone() const override
         {
-            return (_geo.TimeZone());
+            return (_data.Geo.TimeZone.Value());
         }
-        virtual string Latitude() const
+        int32_t Latitude() const override
         {
-            return (_geo.Latitude());
+            return (_data.Geo.Latitude());
         }
-        virtual string Longitude() const
+        int32_t Longitude() const override
         {
-            return (_geo.Longitude());
+            return (_data.Geo.Longitude());
         }
-        virtual string IP() const
+        string IP() const override
         {
-            return (_IP.Value());
+            return (_data.IP.Value());
         }
-        virtual void Updated()
-        {
-            string info = _geo.Latitude();
+        void FromString(const string& data) override {
+            TRACE(Trace::Information, (_T("Metrological: Received a response: [%s]!"), data.c_str()));
 
-            size_t location = info.find(',', 1);
+                _data.IElement::FromString(data);
 
-            if (location != string::npos) {
-                _geo.Location(info.substr(1, location - 1), info.substr(location + 1, info.length() - location - 2));
-            }
+ string parsed;
+		_data.IElement::ToString(parsed);
+            TRACE(Trace::Information, (_T("Metrological: reverted response: [%s]!"), parsed.c_str()));
         }
 
     private:
-        Core::JSON::String _IP;
-        Core::JSON::Boolean _ping;
-        Geography _geo;
+        Data _data;
     };
 
     static Core::ProxyPoolType<Web::Response> g_Factory(1);
@@ -241,13 +309,12 @@ namespace Plugin {
     };
 
     DomainConstructor g_domainFactory[] = {
-        { _TXT("jsonip.metrological.com"), []() -> Core::ProxyType<IGeography> { return Core::ProxyType<Plugin::IGeography>(Core::ProxyType<Web::JSONBodyType<Response>>::Create()); } },
-        { _TXT("ip-api.com"), []() -> Core::ProxyType<IGeography> { return Core::ProxyType<Plugin::IGeography>(Core::ProxyType<Web::JSONBodyType<Geography>>::Create()); } }
+        { _TXT("jsonip.metrological.com"), []() -> Core::ProxyType<IGeography> { return (Core::ProxyType<IGeography>(Core::ProxyType<Plugin::Metrological>::Create())); } },
+        { _TXT("ip-api.com"), []() -> Core::ProxyType<IGeography> { return (Core::ProxyType<IGeography>(Core::ProxyType<Plugin::IPAPI>::Create())); } }
     };
 
     static DomainConstructor* FindDomain(const Core::URL& domain)
     {
-
         uint32_t index = 0;
 
         while ((index < (sizeof(g_domainFactory) / sizeof(DomainConstructor))) && (domain.IsDomain(g_domainFactory[index].domainName, g_domainFactory[index].length) == false)) {
@@ -273,6 +340,8 @@ namespace Plugin {
         , _country()
         , _region()
         , _city()
+        , _latitude()
+        , _longitude()
         , _activity(*this)
         , _infoCarrier()
         , _request(Core::ProxyType<Web::Request>::Create())
@@ -282,7 +351,7 @@ namespace Plugin {
 #pragma warning(default : 4355)
 #endif
 
-    /* virtual */ LocationService::~LocationService()
+    LocationService::~LocationService() /* override */
     {
 
         Stop();
@@ -315,7 +384,6 @@ namespace Plugin {
 
                     const string hostName(info.Host().Value());
 
-
                     _state = ACTIVE;
 
                     // it runs till zero, so subtract by definition 1 :-)
@@ -340,7 +408,6 @@ namespace Plugin {
                         _request->Query = info.Query().Value();
                     }
 
-                    string fullRequest; _request->ToString(fullRequest);
                     _infoCarrier = constructor->factory();
 
                     _activity.Submit();
@@ -378,21 +445,26 @@ namespace Plugin {
     }
 
     // Methods to extract and insert data into the socket buffers
-    /* virtual */ void LocationService::LinkBody(Core::ProxyType<Web::Response>& element)
+    void LocationService::LinkBody(Core::ProxyType<Web::Response>& element) /* override */
     {
         if (element->ErrorCode == Web::STATUS_OK) {
 
             ASSERT(_infoCarrier.IsValid() == true);
 
-            element->Body<Web::IBody>(Core::proxy_cast<Web::IBody>(_infoCarrier));
+            element->Body<Web::IBody>(Core::proxy_cast<Web::IBody>(Core::ProxyType<Web::TextBody>::Create()));
         }
     }
 
-    /* virtual */ void LocationService::Received(Core::ProxyType<Web::Response>& element)
+    void LocationService::Received(Core::ProxyType<Web::Response>& element) /* override */
     {
-        if (element->HasBody() == true) {
+        Core::ProxyType<Web::TextBody> textInfo = element->Body<Web::TextBody>();
+
+        if (textInfo.IsValid() == false) {
+            TRACE(Trace::Information, (_T("Got a response but had an empty body!")));
+        }
+        else {
 
-            // ASSERT(element->Body<Web::JSONBodyType<IGeography> >() == _response);
+            _infoCarrier->FromString(*textInfo);
 
             _adminLock.Lock();
 
@@ -400,6 +472,8 @@ namespace Plugin {
             _country = _infoCarrier->Country();
             _region = _infoCarrier->Region();
             _city = _infoCarrier->City();
+            _latitude = _infoCarrier->Latitude();
+            _longitude = _infoCarrier->Longitude();
 
             if (_state == IPV6_INPROGRESS) {
 
@@ -419,19 +493,15 @@ namespace Plugin {
 
             Core::NodeId node(_publicIPAddress.c_str(), Core::NodeId::TYPE_UNSPECIFIED);
 
-            if (node.IsValid() == true) {
-
+            if (node.IsValid() != true) {
+                TRACE(Trace::Information, (_T("Could not determine the external public IP address [%s]"), _publicIPAddress.c_str()));
+            }
+            else {
                 if (node.Type() == Core::NodeId::TYPE_IPV4) {
                     Core::NodeId::ClearIPV6Enabled();
                 }
 
-                TRACE(Trace::Information, (_T("Network connectivity established on %s. ip: %s, tz: %s, country: %s"),
-                    node.Type() == Core::NodeId::TYPE_IPV4 ? _T("IPv4") : _T("IP6"),
-                    _publicIPAddress.c_str(),
-                    _timeZone.c_str(),
-                    _country.c_str()));
-
-                TRACE(Trace::Information, (_T("LocationSync: Network connectivity established. Type: %s, on %s"), (node.Type() == Core::NodeId::TYPE_IPV6 ? _T("IPv6") : _T("IPv4")), node.HostAddress().c_str()));
+                TRACE(Trace::Information, (_T("Network connectivity established. Type: %s, on %s"), (node.Type() == Core::NodeId::TYPE_IPV6 ? _T("IPv6") : _T("IPv4")), node.HostAddress().c_str()));
                 _callback->Dispatch();
             }
 
@@ -440,27 +510,26 @@ namespace Plugin {
             _infoCarrier.Release();
 
             _adminLock.Unlock();
-        } else {
-            TRACE(Trace::Information, (_T("Got a response but had an empty body. %d"), __LINE__));
         }
 
         // Finish the cycle..
         _activity.Submit();
     }
 
-    /* virtual */ void LocationService::Send(const Core::ProxyType<Web::Request>& element)
+    void LocationService::Send(const Core::ProxyType<Web::Request>& element) /* override */
     {
         // Not much to do, just so we know we are done...
         ASSERT(element == _request);
     }
 
     // Signal a state change, Opened, Closed or Accepted
-    /* virtual */ void LocationService::StateChange()
+    void LocationService::StateChange() /* override */
     {
         if (Link().IsOpen() == true) {
 
             // Send out a trigger to send the request
             Submit(_request);
+            TRACE(Trace::Information, (_T("Connection open, Location requets submitted.")));
         } else if (Link().HasError() == true) {
             Close(0);
 
@@ -474,7 +543,7 @@ namespace Plugin {
     {
         uint32_t result = Core::infinite;
 
-        if ((IsClosed() == false) || (Close(100) != Core::ERROR_NONE)) {
+        if ((Close(100) != Core::ERROR_NONE) || (IsClosed() == false)) {
 
             result = 500; // ms...Check again..
         } else {
@@ -502,7 +571,7 @@ namespace Plugin {
                     Link().LocalNode(remote.AnyInterface());
                     Link().RemoteNode(remote);
 
-                    TRACE(Trace::Warning, (_T("Probing [%s:%d] on [%s]"), remote.HostAddress().c_str(), remote.PortNumber(), remote.Type() == Core::NodeId::TYPE_IPV6 ? _T("IPV6") : _T("IPv4")));
+                    TRACE(Trace::Information, (_T("Probing [%s:%d] on [%s]"), remote.HostAddress().c_str(), remote.PortNumber(), remote.Type() == Core::NodeId::TYPE_IPV6 ? _T("IPV6") : _T("IPv4")));
                     _state = (remote.Type() == Core::NodeId::TYPE_IPV6 ? IPV6_INPROGRESS : IPV4_INPROGRESS);
 
                     uint32_t status = Open(0);
diff --git a/LocationSync/LocationService.h b/LocationSync/LocationService.h
index 61a0d1a..f30f2c5 100644
--- a/LocationSync/LocationService.h
+++ b/LocationSync/LocationService.h
@@ -54,7 +54,7 @@ namespace Plugin {
 
     public:
         LocationService(Core::IDispatchType<void>* update);
-        virtual ~LocationService();
+        ~LocationService() override;
 
     public:
         BEGIN_INTERFACE_MAP(LocationService)
@@ -69,48 +69,56 @@ namespace Plugin {
         void Stop();
 
         /*
-       * ------------------------------------------------------------------------------------------------------------
-       * ISubSystem::INetwork methods
-       * ------------------------------------------------------------------------------------------------------------
-       */
-        virtual string PublicIPAddress() const
+        * ------------------------------------------------------------------------------------------------------------
+        * ISubSystem::INetwork methods
+        * ------------------------------------------------------------------------------------------------------------
+        */
+        string PublicIPAddress() const override
         {
             return (_publicIPAddress);
         }
-        virtual network_type NetworkType() const
+        network_type NetworkType() const override
         {
             return (_publicIPAddress.empty() == true ? PluginHost::ISubSystem::IInternet::UNKNOWN : (Core::NodeId::IsIPV6Enabled() ? PluginHost::ISubSystem::IInternet::IPV6 : PluginHost::ISubSystem::IInternet::IPV4));
         }
         /*
-       * ------------------------------------------------------------------------------------------------------------
-       * ISubSystem::ILocation methods
-       * ------------------------------------------------------------------------------------------------------------
-       */
-        virtual string TimeZone() const
+        * ------------------------------------------------------------------------------------------------------------
+        * ISubSystem::ILocation methods
+        * ------------------------------------------------------------------------------------------------------------
+        */
+        string TimeZone() const override
         {
             return (_timeZone);
         }
-        virtual string Country() const
+        string Country() const override
         {
             return (_country);
         }
-        virtual string Region() const
+        string Region() const override
         {
             return (_region);
         }
-        virtual string City() const
+        string City() const override
         {
             return (_city);
         }
+        int32_t Latitude() const override
+        {
+            return (_latitude);
+        }
+        int32_t Longitude() const override
+        {
+            return (_longitude);
+        }
 
     private:
         // Notification of a Partial Request received, time to attach a body..
-        virtual void LinkBody(Core::ProxyType<Web::Response>& element) override;
-        virtual void Received(Core::ProxyType<Web::Response>& element) override;
-        virtual void Send(const Core::ProxyType<Web::Request>& element) override;
+        void LinkBody(Core::ProxyType<Web::Response>& element) override;
+        void Received(Core::ProxyType<Web::Response>& element) override;
+        void Send(const Core::ProxyType<Web::Request>& element) override;
 
         // Signal a state change, Opened, Closed or Accepted
-        virtual void StateChange() override;
+        void StateChange() override;
 
         friend Core::ThreadPool::JobType<LocationService&>;
         void Dispatch();
@@ -128,6 +136,8 @@ namespace Plugin {
         string _country;
         string _region;
         string _city;
+        int32_t _latitude;
+        int32_t _longitude;
         Core::WorkerPool::JobType<LocationService&> _activity;
         Core::ProxyType<IGeography> _infoCarrier;
         Core::ProxyType<Web::Request> _request;
diff --git a/LocationSync/LocationSync.cpp b/LocationSync/LocationSync.cpp
index 9db75ee..794bbd0 100644
--- a/LocationSync/LocationSync.cpp
+++ b/LocationSync/LocationSync.cpp
@@ -42,12 +42,12 @@ namespace Plugin {
 #pragma warning(default : 4355)
 #endif
 
-    /* virtual */ LocationSync::~LocationSync()
+    LocationSync::~LocationSync() /* override */
     {
         UnregisterAll();
     }
 
-    /* virtual */ const string LocationSync::Initialize(PluginHost::IShell* service)
+    const string LocationSync::Initialize(PluginHost::IShell* service) /* override */
     {
         string result;
         Config config;
@@ -68,25 +68,25 @@ namespace Plugin {
         return (result);
     }
 
-    /* virtual */ void LocationSync::Deinitialize(PluginHost::IShell* service)
+    void LocationSync::Deinitialize(PluginHost::IShell* service) /* override */
     {
         ASSERT(_service == service);
 
         _sink.Deinitialize();
     }
 
-    /* virtual */ string LocationSync::Information() const
+    string LocationSync::Information() const /* override */
     {
         // No additional info to report.
         return (string());
     }
 
-    /* virtual */ void LocationSync::Inbound(Web::Request& /* request */)
+    void LocationSync::Inbound(Web::Request& /* request */) /* override */
     {
     }
 
-    /* virtual */ Core::ProxyType<Web::Response>
-    LocationSync::Process(const Web::Request& request)
+    Core::ProxyType<Web::Response>
+    LocationSync::Process(const Web::Request& request) /* override */
     {
         Core::ProxyType<Web::Response> result(PluginHost::IFactories::Instance().Response());
         Core::TextSegmentIterator index(
diff --git a/LocationSync/LocationSync.h b/LocationSync/LocationSync.h
index f39a86e..768c2d2 100644
--- a/LocationSync/LocationSync.h
+++ b/LocationSync/LocationSync.h
@@ -49,7 +49,7 @@ namespace Plugin {
                 Add(_T("city"), &Region);
             }
 
-            virtual ~Data()
+            ~Data() override
             {
             }
 
@@ -128,7 +128,7 @@ namespace Plugin {
                 return (_locator != nullptr ? _locator->Probe(_source, _retries, _interval) : Core::ERROR_UNAVAILABLE);
             }
 
-            virtual void Dispatch()
+            void Dispatch() override
             {
                 _parent.SyncedLocation();
             }
@@ -172,7 +172,7 @@ namespace Plugin {
 
     public:
         LocationSync();
-        virtual ~LocationSync();
+        ~LocationSync() override;
 
         // Build QueryInterface implementation, specifying all possible interfaces to be returned.
         BEGIN_INTERFACE_MAP(LocationSync)
@@ -184,14 +184,14 @@ namespace Plugin {
     public:
         //   IPlugin methods
         // -------------------------------------------------------------------------------------------------------
-        virtual const string Initialize(PluginHost::IShell* service) override;
-        virtual void Deinitialize(PluginHost::IShell* service) override;
-        virtual string Information() const override;
+        const string Initialize(PluginHost::IShell* service) override;
+        void Deinitialize(PluginHost::IShell* service) override;
+        string Information() const override;
 
         //   IWeb methods
         // -------------------------------------------------------------------------------------------------------
-        virtual void Inbound(Web::Request& request) override;
-        virtual Core::ProxyType<Web::Response> Process(const Web::Request& request) override;
+        void Inbound(Web::Request& request) override;
+        Core::ProxyType<Web::Response> Process(const Web::Request& request) override;
 
     private:
         void RegisterAll();
